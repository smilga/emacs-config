* Package management
** Add packages from sources
   Load packages from melpa
   #+BEGIN_SRC emacs-lisp
    (require 'package)
    (setq package-enable-at-startup nil)
    (mapc (lambda(p) (add-to-list 'package-archives p t))
        '(("marmalade" . "http://marmalade-repo.org/packages/")
            ("melpa" . "http://melpa.org/packages/")
            ("org" . "http://orgmode.org/elpa/")))

    (package-initialize)
    (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))

    (require 'use-package)

    (when (not package-archive-contents)
        (package-refresh-contents))
   #+END_SRC
** Package installation with "use package"
   Easy way to install package with use-package
   #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
   #+END_SRC
** Package that allows to try another packages
   Use <M-x>try <RET> package name <RET> and try that package
   #+BEGIN_SRC emacs-lisp
    (use-package try
    :ensure t)
   #+END_SRC
** Load paths
   #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/lisp/")
    ;(require 'highlight-chars)
    ;(add-hook 'font-lock-mode-hook 'hc-highlight-tabs)
   #+END_SRC
* Settings
** Themes
   Load themes from local folder
   #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/themes/")
    (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
    (load-theme 'monokai t)

    (use-package doom-themes
    :ensure t)
    (load-theme 'doom-vibrant t)

    (use-package autumn-light-theme
    :ensure t)

    (use-package theme-changer
    :ensure t
    :config
        (setq calendar-latitude 56.94)
        (setq calendar-longitude 24.10)
        (change-theme 'autumn-light 'doom-vibrant)
    )
   #+END_SRC
** Fonts
   Set fonts, should download if not in system
   #+BEGIN_SRC emacs-lisp
    (set-default-font "Roboto Mono 10")
    (setq-default line-spacing 3)
   #+END_SRC
** Appearance and behavior
   #+BEGIN_SRC emacs-lisp
    (which-function-mode 1); shows in which function you are
    (menu-bar-mode -1); disable menubar
    (toggle-scroll-bar -1); disable scrollbar
    (tool-bar-mode -1); disable toolbar
    (setq inhibit-startup-message t); start with scratch buffer
    (setq-default tab-width 4); tab width
    (global-linum-mode t); show line numbers
    (show-paren-mode 1); show matching parenth
    (setq show-paren-delay 0); turn of matching delay
    ;; use relative line numbers
    (use-package linum-relative
        :ensure t
        :config
            (linum-relative-global-mode t)
            (setq linum-relative-current-symbol "")
    )
    ;; dired use only one buffer
    (put 'dired-find-alternate-file 'disabled nil)
    ;; dired automaticly revert
    (add-hook 'dired-mode-hook 'auto-revert-mode)
    (global-auto-revert-mode 1)
    ;;Turn off bells
    (setq ring-bell-function 'ignore)
    ;;Customizations seperate file from init.el
    (setq custom-file "~/.emacs.d/custom.el")
    (load custom-file)
    ;;Use spaces instead of tabs
    (setq c-basic-indent 4)
    (setq tab-width 4)
    (setq-default indent-tabs-mode nil)
    ;;Show
    ;(setq-default show-trailing-whitespace t)
    ;;C-U scroll top evil
    (setq evil-want-C-u-scroll t)
    (set-default 'truncate-lines t); Stop wrap lines
    (setq web-mode-script-padding 4)
    (setq web-mode-style-padding 4)
   #+END_SRC
   Backup files
   #+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil)
    ;(setq backup-directory-alist `(("." . "~/.emacs.d/.saves")))
   #+END_SRC
* Major modes
** Javascript
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
:ensure t
:init
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-to-list 'load-path "/home/shmiga/github.com/tern/emacs/")
)
(autoload 'tern-mode "tern.el" nil t)

(add-hook 'js2-mode-hook (lambda () (tern-mode t)))

(eval-after-load 'tern
'(progn
	(require 'tern-auto-complete)
	(tern-ac-setup)))
#+END_SRC
** Vuejs
Use web mode instead of vue-mode
#+BEGIN_SRC emacs-lisp
;(use-package vue-mode
;	:ensure t
;	:config
;	;; 0, 1, or 2, representing (respectively) none, low, and high coloring
;	(setq mmm-submode-decoration-level 0))
#+END_SRC
** Web Mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
:ensure t
:init
(add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.gohtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.blade.php\\'" . web-mode))
)
#+END_SRC
** Golang
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
:ensure t)

(use-package go-mode
	:ensure t
	:init
 	(defun my-go-mode-hook ()
 		(setq gofmt-command "goimports")
 		(add-hook 'before-save-hook 'gofmt-before-save)
 	)
 	(add-hook 'go-mode-hook 'my-go-mode-hook)
)
;;Shows type information
(use-package go-eldoc
:ensure t)
(add-hook 'go-mode-hook 'go-eldoc-setup)

;add-to-list 'load-path (concat (getenv "GOPATH")  "/src/github.com/golang/lint/misc/emacs"))
;(require 'golint)

#+END_SRC
** PHP
#+BEGIN_SRC emacs-lisp
(use-package php-mode
:ensure t)

(setq exec-path (append exec-path '("/home/maxtraffic/.composer/vendor/bin")))
#+END_SRC
* Minor modes
** Completion
   Incremental completion in menus
   #+BEGIN_SRC emacs-lisp
    (use-package helm
    :ensure t)
   #+END_SRC
   Fuzzy completion
   #+BEGIN_SRC emacs-lisp
    (use-package ivy
    :ensure t
    :init
        (ivy-mode 1)
    )
   #+END_SRC
** Evil Mode
   Adds VIM keyindings
   #+BEGIN_SRC emacs-lisp
    (use-package evil
    :ensure t
    :init
        (evil-mode 1)
    )
   #+END_SRC
   Don`t use evil in terminal
   #+BEGIN_SRC emacs-lisp
    (evil-set-initial-state 'term-mode 'emacs)
    (evil-set-initial-state 'sx-tab 'emacs)
   #+END_SRC
   Colorize cursor depending on mode
   #+BEGIN_SRC emacs-lisp
    (setq evil-emacs-state-cursor '("red" box))
    (setq evil-normal-state-cursor '("green" box))
    (setq evil-visual-state-cursor '("orange" box))
    (setq evil-insert-state-cursor '("red" bar))
    (setq evil-replace-state-cursor '("red" bar))
    (setq evil-operator-state-cursor '("red" hollow))
   #+END_SRC
** Emmet
   #+BEGIN_SRC emacs-lisp
    (use-package emmet-mode
        :ensure t
        :init
        (add-hook 'vue-mode-hook 'emmet-mode)
        (add-hook 'html-mode-hook 'emmet-mode)
        (add-hook 'web-mode-hook 'emmet-mode)
    )
   #+END_SRC
** GitGutter
   #+BEGIN_SRC emacs-lisp
    (use-package git-gutter
    :ensure t
    :init
        (global-git-gutter-mode)
        (custom-set-variables
        '(git-gutter:window-width 1)
        '(git-gutter:modified-sign "|")
        '(git-gutter:added-sign "|")
        '(git-gutter:deleted-sign "|"))

        (set-face-foreground 'git-gutter:added "#6fc954")
        (set-face-background 'git-gutter:added "#6fc954")
        (set-face-background 'git-gutter:deleted "#f6546a")
        (set-face-foreground 'git-gutter:deleted "#f6546a")
        (set-face-background 'git-gutter:modified "#fef65b")
        (set-face-foreground 'git-gutter:modified "#fef65b")
    )
   #+END_SRC
** Multiple cursors
   #+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
    :ensure t)
   #+END_SRC
** Rainbow delimitiers
   Colors pairs of brackets according to their depth
   #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    )
   #+END_SRC
** Json mode
   #+BEGIN_SRC emacs-lisp
    (use-package json-mode
    :ensure t)
   #+END_SRC
** Rainbow mode
   Colorize matching parenthesis in different colors
   #+BEGIN_SRC emacs-lisp
    (define-globalized-minor-mode my-global-rainbow-mode rainbow-mode
    (lambda () (rainbow-mode 1)))
    (use-package rainbow-mode
    :ensure t
    :init 
        (my-global-rainbow-mode 1)
    )
   #+END_SRC
** JS import
   Import js modules in file
   #+BEGIN_SRC emacs-lisp
    (use-package js-import
    :ensure t)
   #+END_SRC
** Commentary
   Evil commentary use gcc to comment or uncommnt
   #+BEGIN_SRC emacs-lisp
    (use-package evil-commentary
    :ensure t
    :init
    (evil-commentary-mode t)
    )
   #+END_SRC
** Highlight symbol
   Highlights same symbols in current buffer
   #+BEGIN_SRC emacs-lisp
    (use-package auto-highlight-symbol
    :ensure t
    :init
        (auto-highlight-symbol-mode 1)
    )
   #+END_SRC
** Magit
   Git integration in emacs
   #+BEGIN_SRC emasc-lisp
    (use-package magit
    :ensure t)
   #+END_SRC
   Evil integration with magit
   #+BEGIN_SRC emasc-lisp
    (use-package evil-magit
    :ensure t
    :config
        (evil-magit-init)
    )
   #+END_SRC
** Align block
   #+BEGIN_SRC emacs-lisp
    (use-package evil-lion
    :ensure t
    :bind (:map evil-normal-state-map
            ("g l " . evil-lion-left)
            ("g L " . evil-lion-right)
            :map evil-visual-state-map
            ("g l " . evil-lion-left)
            ("g L " . evil-lion-right))
    :config
    (evil-lion-mode))
   #+END_SRC
** Redis console
   Open redis-cli in emacs
   #+BEGIN_SRC emacs-lisp
    (use-package redis
    :ensure t)
   #+END_SRC
** Highlight numbers
   Highlight numbers in code
   #+BEGIN_SRC emacs-lisp
    (use-package highlight-numbers
    :ensure t
    :config
        (add-hook 'prog-mode-hook 'highlight-numbers-mode)
    )
   #+END_SRC
** Snippets
   //TODO needs more configuration
   Complete snippets
   #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
    :ensure t
    :init
        (yas-global-mode 1)
    )
   #+END_SRC
   Define keybinding
   #+BEGIN_SRC emacs-lisp
    (define-key yas-minor-mode-map (kbd "<C-SPC>") 'yas-expand)
   #+END_SRC
** Power line
   Vim style power line
   #+BEGIN_SRC emacs-lisp
    (use-package telephone-line
    :ensure t
        :config
        (telephone-line-mode t)
        (setq telephone-line-lhs
            '((evil   . (telephone-line-evil-tag-segment))
                (accent . (telephone-line-vc-segment
                        telephone-line-erc-modified-channels-segment
                        telephone-line-process-segment))
                (nil    . (telephone-line-minor-mode-segment
                        telephone-line-buffer-segment))))
        (setq telephone-line-rhs
            '((nil    . (telephone-line-misc-info-segment))
                (accent . (telephone-line-major-mode-segment))
                (evil   . (telephone-line-airline-position-segment))))
    )
   #+END_SRC
** Autopair
   Automaticly close brackets
   #+BEGIN_SRC emacs-lisp
    (use-package autopair
        :ensure t
        :init
        (autopair-global-mode t)
    )
   #+END_SRC
** TreeView
   #+BEGIN_SRC emacs-lisp

    (use-package dired-sidebar
    :ensure t
    :commands (dired-sidebar-toggle-sidebar)
    :config
        (setq dired-sidebar-theme 'nerd)
    )

    (global-set-key (kbd "C-\\") #'dired-sidebar-toggle-sidebar)
   #+END_SRC
** Flycheck
   Syntax checker
   #+BEGIN_SRC emacs-lisp
    (use-package flycheck
        :ensure t
        :init
        (global-flycheck-mode)
        (setq flycheck-check-syntax-automatically '(mode-enabled save))
        (setq-default flycheck-temp-prefix "~/.eslintrc")
        :config
        (setq
        flycheck-disabled-checkers
        (append flycheck-disabled-checkers
            '(javascript-jshint))
        )
    )
    (flycheck-add-mode 'javascript-eslint 'js2-mode)
    (flycheck-add-mode 'javascript-eslint 'web-mode)
    (flycheck-add-mode 'javascript-eslint 'vue-mode)
    (setq-default flycheck-disabled-checkers '(php-phpcs))
   #+END_SRC
** Jump to definition
   Jump to definition package
   #+BEGIN_SRC emacs-lisp
    (use-package dumb-jump
        :config (setq dumb-jump-selector 'helm)
    :ensure)
   #+END_SRC
** Projectile
   Project management tool
   #+BEGIN_SRC emacs-lisp
    (setq projectile-known-projects-file "~/.emacs.d/misc/projectile-bookmarks.eld")
    (use-package projectile
        :ensure t
        :init
        (projectile-global-mode)
    )
   #+END_SRC
** Searching
   Silversearch interface for helm
   Install silversearch before
    https://github.com/ggreer/the_silver_searcher
   #+BEGIN_SRC emacs-lisp
    (use-package helm-ag
    :ensure t)
   #+END_SRC
** Autocomplete
   Autocomplete package
   #+BEGIN_SRC emacs-lisp
    (use-package company
    :ensure t
    :init
        (add-hook 'after-init-hook 'global-company-mode)
    )

    (setq company-idle-delay .3)
    (setq company-echo-delay 0)
   #+END_SRC
   Sort autocomplete results by most used
   #+BEGIN_SRC emacs-lisp
    (use-package company-statistics
    :ensure t
    :init
        (add-hook 'after-init-hook 'company-statistics-mode)
    )
   #+END_SRC
   Web mode for autocomplete
   #+BEGIN_SRC emacs-lisp
    (use-package company-web
    :ensure t
    :init
    (add-hook 'web-mode-hook (lambda ()
                            (set (make-local-variable 'company-backends) '(company-web-html))
                            (company-mode t)))
    )
   #+END_SRC
   Go mode for autocomplete
   #+BEGIN_SRC emacs-lisp
    (use-package company-go
    :ensure t
    :init
    (add-hook 'go-mode-hook (lambda ()
                            (set (make-local-variable 'company-backends) '(company-go))
                            (company-mode)))
    )
   #+END_SRC
** Vim style leader key
   Use leader key
   #+BEGIN_SRC emacs-lisp
    (use-package general :ensure t
        :config
        (general-evil-setup t)
        (general-define-key
        :states '(normal emacs)
        :prefix ","

            "f" 'find-file :which-key "find file"
            "w" 'save-buffer
            "p" 'projectile-find-file

            ;;Buffer management
            "l" 'switch-to-buffer
            "k" 'kill-buffer

            ;;Searching
            "ss" 'helm-do-ag-project-root
            "sr" 'projectile-replace
            "sd" 'helm-do-ag

            ;;Dired
            "dd" 'dired
            "du" 'dired-up-directory

            ;;Go to definition
            "b" 'dumb-jump-back
            "g" 'dumb-jump-go
            "j" 'dumb-jump-quick-look

            ;;JS import
            "ii" 'js-import
            "id" 'js-import-dev
        )

        (general-define-key 
        :states '(normal emacs)
        :keymaps 'go-mode-map
        :prefix ","
            "g" 'godef-jump
        )
    )
   #+END_SRC
** Show keys
   Shows shows shortkeys after <C-x> is pressed
   #+BEGIN_SRC emacs-lisp
    (use-package which-key
    :ensure t
    :config (which-key-mode))
   #+END_SRC
** Show whitesapaces
   Show whitsapce characters
   #+BEGIN_SRC emacs-lisp
    (require 'whitespace)
    (global-whitespace-mode t)
   #+END_SRC
   Configure
   #+BEGIN_SRC emacs-lisp
    (setq whitespace-global-modes '(not go-mode))
    (setq whitespace-style
    '(face empty tabs tab-mark trailing))
   #+END_SRC
** Jump match
   Jump with '%' between tag pairs
   #+BEGIN_SRC emacs-lisp
    (use-package evil-matchit
    :ensure t
    :config
        (global-evil-matchit-mode 1)
    )
   #+END_SRC
** Change suround
   #+BEGIN_SRC emacs-lisp
    (use-package evil-surround
    :ensure t
    :config
        (global-evil-surround-mode 1)
    )
   #+END_SRC
** Fuzzy matching
   #+BEGIN_SRC emacs-lisp
    (use-package flx-ido
    :ensure t
    :init
        (flx-ido-mode 1)
    )
   #+END_SRC
** OS integration
   Syste monitor
   #+BEGIN_SRC emacs-lisp
    (use-package symon
    :ensure t
    :config
        (symon-mode 1)
        (setq symon-sparkline-type 'boxed)
        (setq symon-sparkline-width '200)
    )
   #+END_SRC

** Search Engine
   #+BEGIN_SRC emacs-lisp
(use-package engine-mode
:ensure t
:config
    (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")
)
   #+END_SRC
* Custom definitions
  Override keys with custom bindings
  #+BEGIN_SRC emacs-lisp
    (defvar my-keys-minor-mode-map
    (let ((map (make-sparse-keymap)))
        (define-key map (kbd "C-j") 'evil-window-down)
        (define-key map (kbd "C-k") 'evil-window-up)
        (define-key map (kbd "C-h") 'evil-window-left)
        (define-key map (kbd "C-l") 'evil-window-right)
        map)
    "my-keys-minor-mode keymap.")

    (define-minor-mode my-keys-minor-mode
    :init-value t
    :lighter " my-keys")

    (my-keys-minor-mode 1)
  #+END_SRC
  ESC quits
  #+BEGIN_SRC emacs-lisp
   (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
  #+END_SRC
  Opens buffer list
  #+BEGIN_SRC emacs-lisp
   (defalias 'list-buffers 'ibuffer)
  #+END_SRC
   Edit currently visited file as root.
   #+BEGIN_SRC emacs-lisp
    (defun sudo-edit (&optional arg)
    "Edit currently visited file as root.

    With a prefix ARG prompt for a file to visit.
    Will also prompt for a file to visit if current
    buffer is not visiting a file."
    (interactive "P")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:"
                            (ido-read-file-name "Find file(as root): ")))
        (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
   #+END_SRC

*** Check out these packages
    - https://github.com/ShingoFukuyama/helm-swoop
