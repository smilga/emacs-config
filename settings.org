* Package management
** Add packages from sources
    #+BEGIN_SRC emacs-lisp
	(require 'package)
	(setq pacakge-enable-at-startup nil)
	(add-to-list 'package-archives
		    '("melpa" . "https://melpa.org/packages/"))

	(package-initialize)
    #+END_SRC
** Package installation with "use package"
    #+BEGIN_SRC emacs-lisp
	(unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))
    #+END_SRC
** Package that allows to try another packages
    #+BEGIN_SRC emacs-lisp
	(use-package try
	:ensure t)
    #+END_SRC

* Visual
** Theme
  #+BEGIN_SRC emacs-lisp
	(use-package ujelly-theme
	:ensure t)

	(use-package atom-one-dark-theme
	:ensure t)

	(load-theme 'atom-one-dark t) ;load theme

	(add-to-list 'load-path "~/.emacs.d/themes/")
	(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  #+END_SRC
** UX
  #+BEGIN_SRC emacs-lisp
	(menu-bar-mode -1) ; disable menubar
	(toggle-scroll-bar -1) ; disable scrollbar
	(tool-bar-mode -1) ; disable toolbar 
	(setq inhibit-startup-message t) ; start with scratch buffer
	(setq-default tab-width 4)
	(global-linum-mode t) ;show line numbers
	(setq-default line-spacing 0.4)

	;; use relative line numbers
	(use-package linum-relative
		:ensure t
		:config
			(linum-relative-global-mode t)
			(setq linum-relative-current-symbol "")
	)

	;;Fonts
	;(set-default-font "Monaco 13")
   #+END_SRC

* Behavior
   #+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil) ; stop creating backup~ files
    (setq auto-save-default nil) ; stop creating #autosave# files
    (set-default 'truncate-lines t) ; stop wraping lines


   #+END_SRC

* TreeView
   #+BEGIN_SRC emacs-lisp
	(use-package neotree
	:ensure t
	:init
	(add-hook 'neotree-mode-hook
				(lambda ()
				(define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
				(define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
				(define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
				(define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)))
	)
   #+END_SRC
* Autopair
	#+BEGIN_SRC emacs-lisp
		(use-package autopair
			:ensure t
			:init
			(autopair-global-mode t)
		)
	#+END_SRC
* General keyindings
	#+BEGIN_SRC emacs-lisp

	(use-package general :ensure t
		:config
		(general-evil-setup t)

		(general-define-key
		:states '(normal emacs)
		:prefix ","

			"f" '(find-file :which-key "find file")
			"w" '(save-buffer)
			"'" '(neotree-toggle)
			"p" '(project-find-file)

			;;Splits
			"sl" '(split-window-right)
			"sj" '(split-window-below)
			"sd" '(evil-window-delete)

			;;Window navigation
			"xl" '(evil-window-right)
			"xj" '(evil-window-down)
			"xk" '(evil-window-up)
			"xh" '(evil-window-left)

			;;Buffer management
			"l" '(switch-to-buffer)
			"k" '(kill-buffer)

			;;Go mode
			"gd" '(godef-jump)
		)
	)

	#+END_SRC
* Flycheck
	#+BEGIN_SRC emacs-lisp
		(use-package flycheck
			:ensure t
			:init
			(global-flycheck-mode)
			(setq flycheck-check-syntax-automatically '(mode-enabled save))
		)
	#+END_SRC
  
* Major modes
** Javascript
    #+BEGIN_SRC emacs-lisp
	(use-package js2-mode
	    :ensure t
	)
	(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

	(add-to-list 'load-path "/home/shmiga/github.com/tern/emacs/")
	(autoload 'tern-mode "tern.el" nil t)

	(add-hook 'js2-mode-hook (lambda () (tern-mode t)))

	(eval-after-load 'tern
	'(progn
		(require 'tern-auto-complete)
		(tern-ac-setup)))
    #+END_SRC
   
** Vuejs
    #+BEGIN_SRC emacs-lisp
	(use-package vue-mode
	    :ensure t
	    :config
	    ;; 0, 1, or 2, representing (respectively) none, low, and high coloring
	    (setq mmm-submode-decoration-level 0))
    #+END_SRC
** Golang
    #+BEGIN_SRC emacs-lisp
		(use-package go-mode
			:ensure t
			:init
			(defun my-go-mode-hook ()
			(add-hook 'before-save-hook 'gofmt-before-save) ; gofmt before every save
			; Godef jump key binding                                                      
			(local-set-key (kbd "M-.") 'godef-jump)
			(local-set-key (kbd "M-*") 'pop-tag-mark)
			)
			(add-hook 'go-mode-hook 'my-go-mode-hook)
		)

		(use-package go-autocomplete
		:ensure t)

		(use-package auto-complete-config
		:ensure t)

		(ac-config-default)

		(use-package exec-path-from-shell
		:ensure t)

		(defun my-go-mode-hook ()
			; Call Gofmt before saving
			(add-hook 'before-save-hook 'gofmt-before-save)
			; Customize compile command to run go build
			(if (not (string-match "go" compile-command))
				(set (make-local-variable 'compile-command)
					"go build -v && go test -v && go vet"))
			; Godef jump key binding
			(local-set-key (kbd "M-.") 'godef-jump)
			(local-set-key (kbd "M-*") 'pop-tag-mark)
			)

	#+END_SRC
** PHP
	#+BEGIN_SRC emacs-lisp
		(use-package php-mode
		:ensure t)

	#+END_SRC
** Web
	#+BEGIN_SRC emacs-lisp
		(use-package web-mode
		:ensure t)
	#+END_SRC
* Other
  
#+BEGIN_SRC emacs-lisp
#+END_SRC

#+BEGIN_SRC emacs-lisp

;;Package that shows shows shortkeys after <C-x> is pressed
(use-package which-key
  :ensure t
  :config (which-key-mode))


;;Enables mode that shows buffers
(setq indo-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

;;Opens buffer list
(defalias 'list-buffers 'ibuffer)

;Sets tabbar at the top
;(use-package tabbar
;  :ensure t
;  :config
;  (tabbar-mode 1))

;;For window browsing with <C-x>o
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
    ))

;;For swiper to use <C-x><C-f>

(use-package counsel
  :ensure t
  )

;;Better searching in file with <C-s>
(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))

;;Autocomplete
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))

;;Evil mode
(use-package evil
  :ensure t
  :init
  (evil-mode 1))

;;Themes
(use-package color-theme
  :ensure t)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#2e3436" "#a40000" "#4e9a06" "#c4a000" "#204a87" "#5c3566" "#729fcf" "#eeeeec"])
 '(custom-safe-themes
   (quote
    ("1d079355c721b517fdc9891f0fda927fe3f87288f2e6cc3b8566655a64ca5453" "b3bcf1b12ef2a7606c7697d71b934ca0bdd495d52f901e73ce008c4c9825a3aa" "d5b121d69e48e0f2a84c8e4580f0ba230423391a78fcb4001ccb35d02494d79e" "946e871c780b159c4bb9f580537e5d2f7dba1411143194447604ecbaf01bd90c" "6f11ad991da959fa8de046f7f8271b22d3a97ee7b6eca62c81d5a917790a45d9" "b81bfd85aed18e4341dbf4d461ed42d75ec78820a60ce86730fc17fc949389b2" default)))
 '(package-selected-packages
   (quote
    (evil evil-mode color-theme color-themes auto-complete counsel swiper ace-window which-key try use-package))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))

#+END_SRC

  
