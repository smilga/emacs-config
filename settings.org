* Package management
** Add packages from sources
Load packages from melpa
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq pacakge-enable-at-startup nil)
(add-to-list 'package-archives
		'("melpa" . "https://melpa.org/packages/"))

(package-initialize)
#+END_SRC
** Package installation with "use package"
Easy way to install package with use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
(package-refresh-contents)
(package-install 'use-package))
#+END_SRC
** Package that allows to try another packages
Use <M-x>try <RET> package name <RET> and try that package
#+BEGIN_SRC emacs-lisp
(use-package try
:ensure t)
#+END_SRC
** Load paths
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'highlight-chars)
(add-hook 'font-lock-mode-hook 'hc-highlight-tabs)
#+END_SRC
* Visual
** Theme
Load themes from local folder
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/themes/")
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")

(use-package doom-themes
:ensure t)

(load-theme 'doom-vibrant t) ;load theme
#+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp
;;Set fonts
(set-default-font "Space Mono 10")
#+END_SRC
* Behavior
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil); stop creating backup~ files
(setq auto-save-default nil); stop creating #autosave# files
(set-default 'truncate-lines t); stop wraping lines
(menu-bar-mode -1); disable menubar
(toggle-scroll-bar -1); disable scrollbar
(tool-bar-mode -1); disable toolbar 
(setq inhibit-startup-message t); start with scratch buffer
(setq-default tab-width 4); tab width
(global-linum-mode t); show line numbers
(show-paren-mode 1); show matching parenth
(setq show-paren-delay 0); turn of matching delay
;; use relative line numbers
(use-package linum-relative
	:ensure t
	:config
		(linum-relative-global-mode t)
		(setq linum-relative-current-symbol "")
)
;; dired use only one buffer
(put 'dired-find-alternate-file 'disabled nil)
;; dired automaticly revert
(add-hook 'dired-mode-hook 'auto-revert-mode)
(global-auto-revert-mode 1)
;;Turn off bells
(setq ring-bell-function 'ignore)
;;Customizations seperate file from init.el
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
;;Use spaces instead of tabs
(setq c-basic-indent 4)
(setq tab-width 4)
(setq-default indent-tabs-mode nil)
;;Show
(setq-default show-trailing-whitespace t)
;;C-U scroll top evil
(setq evil-want-C-u-scroll t)
#+END_SRC
* TreeView
#+BEGIN_SRC emacs-lisp
(use-package neotree
:ensure t
:init
(add-hook 'neotree-mode-hook
			(lambda ()
			(define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
			(define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
			(define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
			(define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)))

;;Custom funciton to open netoreee in project root folder
(defun neotree-project-dir-toggle ()
"Open NeoTree using the project root, using find-file-in-project, or the current buffer directory."
(interactive)
(let ((project-dir
	(ignore-errors
	;;; Pick one: projectile or find-file-in-project
	(projectile-project-root)
	;(ffip-project-root)
	))
	;(file-name (buffer-file-name))
	)
(if (and (fboundp 'neo-global--window-exists-p)
		(neo-global--window-exists-p))
	(neotree-hide)
(progn
	(neotree-show)
	(if project-dir
		(neotree-dir project-dir))
	))))

:config
 (setq
  neo-autorefresh t
  neo-theme 'ascii
  neo-vc-integration '(face char))
	(setq neo-force-change-root t)
)
(global-set-key (kbd "C-\\") #'neotree-project-dir-toggle)
(custom-set-faces
 '(neo-vc-added-face ((t (:foreground "lime green"))))
 '(neo-vc-edited-face ((t (:foreground "gold"))))
)

 ;(neo-theme (quote ascii))
#+END_SRC
* Autopair
Automaticly close brackets
#+BEGIN_SRC emacs-lisp
(use-package autopair
	:ensure t
	:init
	(autopair-global-mode t)
)
#+END_SRC
* Projectile
Project management tool
#+BEGIN_SRC emacs-lisp
(setq projectile-known-projects-file "~/.emacs.d/misc/projectile-bookmarks.eld")
(use-package projectile
	:ensure t
	:init
	(projectile-global-mode)
)
#+END_SRC
* Searhcing
#+BEGIN_SRC emacs-lisp
(use-package helm
:ensure t)

(use-package helm-ag
:ensure t)
#+END_SRC
* General keyindings
Adds leader key
#+BEGIN_SRC emacs-lisp
(use-package general :ensure t
	:config
	(general-evil-setup t)


	(general-define-key
	:states '(normal emacs)
	:prefix ","

		"f" '(find-file :which-key "find file")
		"w" '(save-buffer)
		"p" '(projectile-find-file)

		;;Buffer management
		"l" '(switch-to-buffer)
		"k" '(kill-buffer)

		;;Searching
		"ss" '(helm-do-ag-project-root)
		"sr" '(projectile-replace)
		"sd" '(helm-do-ag)

		;;Dired
		"dd" '(dired)
		"du" '(dired-up-directory)


		;;Go to definition
		"b" '(dumb-jump-back)
		"g" '(dumb-jump-go)
		"j" '(dumb-jump-quick-look)

		;;Go mode

		;;JS import
		"ii" '(js-import)
		"id" '(js-import-dev)
	)

	(general-define-key 
	:states '(normal emacs)
	:keymaps 'go-mode-map
	:prefix ","
		"g" '(godef-jump)
	)
)
#+END_SRC
* DumbJump
Jump to definition package. Uses silversearch.
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :config (setq dumb-jump-selector 'helm)
  :ensure)
#+END_SRC
* Flycheck
Syntax checker
#+BEGIN_SRC emacs-lisp
(use-package flycheck
	:ensure t
	:init
	(global-flycheck-mode)
	(setq flycheck-check-syntax-automatically '(mode-enabled save))
	(setq-default flycheck-temp-prefix "~/.eslintrc")
	:config
	(setq
	flycheck-disabled-checkers
	(append flycheck-disabled-checkers
		'(javascript-jshint))
	)
)
(flycheck-add-mode 'javascript-eslint 'js2-mode)
(flycheck-add-mode 'javascript-eslint 'web-mode)
(flycheck-add-mode 'javascript-eslint 'vue-mode)
(setq-default flycheck-disabled-checkers '(php-phpcs))
#+END_SRC
* Company
Autocomplete package
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
	(setq ac-menu-height       20)
	(setq ac-auto-start t)
	(setq ac-use-comphist t)
	(setq ac-ignore-case 0)
	(setq ac-show-menu-immediately-on-auto-complete t)
    ))
#+END_SRC
* Powerline
(use-package powerline
:ensure t)
(powerline-default-theme)
* Imenu-list
Show list of all variables and mehtods in current file
#+BEGIN_SRC emacs-lisp
(use-package imenu-list
:ensure t
:config
(setq imenu-list-auto-resize t)
(setq imenu-list-focus-after-activation t)
)
(global-set-key (kbd "C-'") #'imenu-list-smart-toggle)
#+END_SRC
* Js import
Script automaticly generates js import path
#+BEGIN_SRC emacs-lisp
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
:ensure t
:init
(yas-global-mode 1)
)

(define-key yas-minor-mode-map (kbd "<C-SPC>") 'yas-expand)

(use-package yasnippet-snippets
:ensure t)

(use-package php-auto-yasnippets
:ensure t
:config
(payas/ac-setup)
)
#+END_SRC
* Todo
#+BEGIN_SRC emacs-lisp
(use-package hl-todo
:ensure t
:init
(global-hl-todo-mode t)
)
#+END_SRC
* Highlight numbers
#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers
:ensure t
:config
(add-hook 'prog-mode-hook 'highlight-numbers-mode)
)
#+END_SRC
* Magit
(use-package magit
:ensure t)

(use-package evil-magit
:ensure t
:config
(evil-magit-init)
)
* Js import
#+BEGIN_SRC emacs-lisp
(use-package js-import
:ensure t)
#+END_SRC
* Rainbow-mode
(define-globalized-minor-mode my-global-rainbow-mode rainbow-mode
  (lambda () (rainbow-mode 1)))
(use-package rainbow-mode
:ensure t
:init 
(my-global-rainbow-mode 1)
)
* Major modes
** Javascript
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
:ensure t
:init
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-to-list 'load-path "/home/shmiga/github.com/tern/emacs/")
)
(autoload 'tern-mode "tern.el" nil t)

(add-hook 'js2-mode-hook (lambda () (tern-mode t)))

(eval-after-load 'tern
'(progn
	(require 'tern-auto-complete)
	(tern-ac-setup)))
#+END_SRC
** Vuejs
Use web mode instead of vue-mode
#+BEGIN_SRC emacs-lisp
;(use-package vue-mode
;	:ensure t
;	:config
;	;; 0, 1, or 2, representing (respectively) none, low, and high coloring
;	(setq mmm-submode-decoration-level 0))
#+END_SRC
** Web Mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
:ensure t
:init
(add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.blade.php\\'" . web-mode))
)
#+END_SRC
** Golang
#+BEGIN_SRC emacs-lisp
(setq shell-command-switch "-ic")
(use-package exec-path-from-shell
:ensure t)

(require 'go-guru)
(add-hook 'go-mode-hook #'go-guru-hl-identifier-mode)

(use-package go-mode
	:ensure t
	:init
 	(defun my-go-mode-hook ()
 		(setq gofmt-command "goimports")
 		(add-hook 'before-save-hook 'gofmt-before-save) ; gofmt before every save
 	)
 	(add-hook 'go-mode-hook 'my-go-mode-hook)
)

(use-package go-autocomplete
:ensure t)

(defun auto-complete-for-go ()
(auto-complete-mode 1))
 (add-hook 'go-mode-hook 'auto-complete-for-go)

(with-eval-after-load 'go-mode
   (require 'go-autocomplete))
#+END_SRC
** PHP
#+BEGIN_SRC emacs-lisp
(use-package php-mode
:ensure t)

(setq exec-path (append exec-path '("/home/maxtraffic/.composer/vendor/bin")))
#+END_SRC
* Minor modes
** Evil Mode
Adds VIM keyindings
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init
  (evil-mode 1)
)
#+END_SRC
** Emmet
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
	:ensure t
	:init
	(add-hook 'vue-mode-hook 'emmet-mode)
	(add-hook 'html-mode-hook 'emmet-mode)
	(add-hook 'web-mode-hook 'emmet-mode)
)
#+END_SRC
** GitGutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
:ensure t
:init
	(global-git-gutter-mode)
	;(custom-set-variables
	;'(git-gutter:window-width 2)
	;'(git-gutter:modified-sign "~")
	;'(git-gutter:added-sign "+")
	;'(git-gutter:deleted-sign "-"))

	;(set-face-background 'git-gutter:modified "none") ;; background color
	(set-face-foreground 'git-gutter:added "green")
	(set-face-foreground 'git-gutter:deleted "red")
	(set-face-foreground 'git-gutter:modified "yellow")
)
#+END_SRC
** Multiple cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
:ensure t)
#+END_SRC
** Rainbow delimitiers
Colors pairs of brackets according to their depth
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
:ensure t
:init
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
)
#+END_SRC
** Json mode
#+BEGIN_SRC emacs-lisp
(use-package json-mode
:ensure t)
#+END_SRC
** SmartTab
#+BEGIN_SRC emacs-lisp
(use-package smart-tab
:ensure t
:init
(global-smart-tab-mode 1)
)
#+END_SRC

* Commentary
Evil commentary use gcc to comment or uncommnt
#+BEGIN_SRC emacs-lisp
(use-package evil-commentary
:ensure t
:init
(evil-commentary-mode t)
)
#+END_SRC
* Auto highlight symbol
Highlights same symbols in current buffer
#+BEGIN_SRC emacs-lisp
(use-package auto-highlight-symbol
:ensure t
:init
(auto-highlight-symbol-mode 1)
)
#+END_SRC
* Magit
#+BEGIN_SRC emasc-lisp
(use-package magit
:ensure t)
(use-package evil-magit
:ensure t)
#+END_SRC
* Align
#+BEGIN_SRC emacs-lisp
(use-package evil-lion
  :ensure t
  :bind (:map evil-normal-state-map
         ("g l " . evil-lion-left)
         ("g L " . evil-lion-right)
         :map evil-visual-state-map
         ("g l " . evil-lion-left)
         ("g L " . evil-lion-right))
  :config
  (evil-lion-mode))
#+END_SRC
* Redis
#+BEGIN_SRC emacs-lisp
(use-package redis
:ensure t)
#+END_SRC

* Other
#+BEGIN_SRC emacs-lisp
(defvar my-keys-minor-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "C-j") 'evil-window-down)
    (define-key map (kbd "C-k") 'evil-window-up)
    (define-key map (kbd "C-h") 'evil-window-left)
    (define-key map (kbd "C-l") 'evil-window-right)
	(global-set-key (kbd "C-n") 'mc/mark-next-like-this)
    map)
  "my-keys-minor-mode keymap.")

(define-minor-mode my-keys-minor-mode
  "A minor mode so that my key settings override annoying major modes."
  :init-value t
  :lighter " my-keys")

(my-keys-minor-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;;Colorize cursor depending on mode
(setq evil-emacs-state-cursor '("red" box))
(setq evil-normal-state-cursor '("green" box))
(setq evil-visual-state-cursor '("orange" box))
(setq evil-insert-state-cursor '("red" bar))
(setq evil-replace-state-cursor '("red" bar))
(setq evil-operator-state-cursor '("red" hollow))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; esc quits
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))

#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package powerline
:ensure t
;:config
;(powerline-evil-vim-color-theme)
;(display-time-mode t)
)
#+END_SRC
#+BEGIN_SRC emacs-lisp

;;Package that shows shows shortkeys after <C-x> is pressed
(use-package which-key
  :ensure t
  :config (which-key-mode))


;;Enables mode that shows buffers
;(setq indo-enable-flex-matching t)
;(setq ido-everywhere t)
;(ido-mode 1)

;;Opens buffer list
(defalias 'list-buffers 'ibuffer)

;;For swiper to use <C-x><C-f>

(use-package counsel
  :ensure t
)

;;Better searching in file with <C-s>
(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))



;;Themes
(use-package color-theme
  :ensure t)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#2e3436" "#a40000" "#4e9a06" "#c4a000" "#204a87" "#5c3566" "#729fcf" "#eeeeec"])
 '(custom-safe-themes
   (quote
    ("1d079355c721b517fdc9891f0fda927fe3f87288f2e6cc3b8566655a64ca5453" "b3bcf1b12ef2a7606c7697d71b934ca0bdd495d52f901e73ce008c4c9825a3aa" "d5b121d69e48e0f2a84c8e4580f0ba230423391a78fcb4001ccb35d02494d79e" "946e871c780b159c4bb9f580537e5d2f7dba1411143194447604ecbaf01bd90c" "6f11ad991da959fa8de046f7f8271b22d3a97ee7b6eca62c81d5a917790a45d9" "b81bfd85aed18e4341dbf4d461ed42d75ec78820a60ce86730fc17fc949389b2" default)))
 '(package-selected-packages
   (quote
    (evil evil-mode color-theme color-themes auto-complete counsel swiper ace-window which-key try use-package))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))

#+END_SRC


